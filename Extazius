import discord
from discord.ext import commands
import mysql.connector
from datetime import datetime, timedelta
import humanize

intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='/', intents=intents)

config = {
    'host': '193.84.64.16',
    'user': 'extaziu2_2',
    'password': 'extazius123!',
    'database': 'extaziu2_2',
}
cnx = mysql.connector.connect(**config)
cursor = cnx.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS testbot (
        nume VARCHAR(50) UNIQUE,
        puncte INT
    )
""")
cnx.commit()

giveaway_data = {}


@bot.event
async def on_ready():
    print(f'Connected as {bot.user.name}')


@bot.command()
async def register(ctx):
    user = ctx.author

    cursor.execute('SELECT nume FROM testbot WHERE nume = %s', (user.name,))
    existing_rows = cursor.fetchall()

    if existing_rows:
        await ctx.send(f'{user.name}, you are already registered! No need to register again.')
    else:
        cursor.execute('INSERT INTO testbot (nume, puncte) VALUES (%s, 0)', (user.name,))
        cnx.commit()
        await ctx.send(f'{user.name} has been registered successfully!')


@bot.command()
async def points(ctx):
    user = ctx.author
    cursor.execute("SELECT puncte FROM testbot WHERE nume = %s", (user.name,))
    row = cursor.fetchone()

    if row is not None:
        await ctx.send(f'Player *{user.name}* has ```{row[0]}``` points!')
    else:
        await ctx.send(f'Couldn\'t find the player {user.mention} in the database.')


@bot.command()
@commands.has_permissions(administrator=True)
async def setpoints(ctx, user: discord.Member, points: int):
    cursor.execute("UPDATE testbot SET puncte = %s WHERE nume = %s", (points, user.name))
    cnx.commit()
    await ctx.send(f'Points for {user.mention} have been set to `{points}`!')


@bot.command()
@commands.has_permissions(administrator=True)
async def give(ctx, user: discord.Member, points: int):
    cursor.execute("SELECT puncte FROM testbot WHERE nume = %s", (user.name,))
    row = cursor.fetchone()

    if row is not None:
        old_points = row[0]
        new_points = old_points + points

        cursor.execute("UPDATE testbot SET puncte = %s WHERE nume = %s", (new_points, user.name))
        cnx.commit()
        await ctx.send(f'Points for {user.mention} have been updated to `{new_points}`!')
    else:
        await ctx.send(f'Couldn\'t find the player {user.mention} in the database.')


@bot.command()
@commands.has_permissions(administrator=True)
async def giveaway(ctx, duration: str, winners: int, entry_fee: int, prize: int, description: str):
    user = ctx.author

    def parse_duration(duration):
        duration_multiplier = {'m': 60, 'h': 3600, 'd': 86400}
        suffix = duration[-1]

        if suffix in duration_multiplier:
            return int(duration[:-1]) * duration_multiplier[suffix]

        return int(duration)

    total_duration = parse_duration(duration)

    embed = discord.Embed(
        title="Giveaway",
        description=f"{description} \n\nUse ✅ to enter!\n\n**Prize:** {prize} points\n**Winners:** {winners}\n**Entry Fee:** {entry_fee} points\n**Ends In:** {humanize.naturaltime(datetime.utcnow() + timedelta(seconds=total_duration))}",
        color=0x00FF00
    )
    embed.set_footer(text=f"Hosted by {user.name}")

    message = await ctx.send(embed=embed)
    await message.add_reaction('✅')

    giveaway_data[message.id] = {
        'host': user.id,
        'winners': winners,
        'entry_fee': entry_fee,
        'prize': prize,
        'end_time': datetime.utcnow() + timedelta(seconds=total_duration),
        'participants': [],
        'emoji': '✅'
    }

@bot.event
async def on_reaction_add(reaction, user):
    if user.bot:  # Ignoră reacțiile de la bot
        return

    message_id = reaction.message.id
    if message_id in giveaway_data:
        giveaway_info = giveaway_data[message_id]
        entry_fee = giveaway_info['entry_fee']

        cursor.execute("SELECT puncte FROM testbot WHERE nume = %s", (user.name,))
        row = cursor.fetchone()

        if row is not None and row[0] >= entry_fee:
            new_points = row[0] - entry_fee
            cursor.execute("UPDATE testbot SET puncte = %s WHERE nume = %s", (new_points, user.name))
            cnx.commit()

            giveaway_info['participants'].append(user.id)

            await user.send(f"You've successfully entered the giveaway! You paid {entry_fee} points as an entry fee.")
            await user.send(f"Good luck! ✅")
        else:
            await user.send(f"Insufficient points to enter the giveaway. You need {entry_fee} points.")
            await reaction.remove(user)  # Remove the reaction if entry is not successful

@bot.event
async def on_bot_close():
    cursor.close()
    cnx.close()


bot.run('MTIwNTk0MzUxNzMxOTM5NzUyNg.GGbYUv.6Q6BPrwVzA9qHtcEoqvJ1mtmGPMUAG44PUZRCc')
